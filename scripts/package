#!/usr/bin/env python
import os
import subprocess
import sys
from pathlib import Path

# Define the base information for the download
gptscript_info = {
    "name": "gptscript",
    "url": "https://github.com/gptscript-ai/gptscript/releases/download/",
    "version": "v0.8.5",
}

# Define platform-specific variables
platform_names = {
    "linux": {"name": "linux", "archs": ["arm64", "amd64"]},
    "darwin": {"name": "macOS", "archs": ["universal"]},
    "windows": {"name": "windows", "archs": ["amd64"]},
}

# Define suffix for different platforms
suffixes = {
    "linux": "tar.gz",
    "macOS": "tar.gz",
    "windows": "zip",
}


def wheel_platform_tag(platform, arch):
    py_arch = {
        "universal": "universal2",
        "arm64": "aarch64",
        "amd64": "x86_64",
    }[arch]

    # cause... windows
    py_arch = py_arch if platform != "windows" else "amd64"

    py_platform = {
        "linux": "manylinux2014",
        "macOS": "macosx_10_9",
        "windows": "win",
    }[platform]

    return f"{py_platform}_{py_arch}"


def build_wheel_for_platform(output_dir):
    """
    Build a wheel for each platform specified in platform_names.
    Assumes a setup.py file is present and correctly configured.
    """
    for platform in platform_names.values():
        for arch in platform["archs"]:
            # Set environment variables to influence the build process for specific platform and architecture
            os.environ["PLAT"] = f"{platform["name"]}-{arch}"
            try:
                # Call the build module to build the project
                subprocess.check_call(
                    [sys.executable, "-m", "build", "--outdir", str(output_dir)]
                )
            finally:
                # Cleanup environment variables
                del os.environ["PLAT"]


def main():
    base_dir = Path(__file__).resolve().parent
    dist_dir = base_dir.parent / "dist"

    build_wheel_for_platform(dist_dir)


if __name__ == "__main__":
    main()
